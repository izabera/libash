#!/usr/bin/env bash

# basic cat replacement that lets you use some editing features
readinput () {
  while read -r -e || { printf %s "$REPLY"; false; } ; do
    history -s -- "$REPLY"
    printf '%s\n' "$REPLY"
  done
}


# usage: mkdirc a/b/c/d/e/f

mkdirc () {
  mkdir -p -- "$@" && cd -- "$_"
}


# go up and destroy temp directories
# won't delete $HOME

uprm () {
  local temp=${PWD##*/}
  [[ $PWD != "$HOME" ]] && cd .. && rm -rf "$temp"
}


# usage: backup FILE..
# backup your files easily to /backup with a timestamp
# the /backup directory must exist and be writable

backup () {
  local sha file date
  printf -v date '%(%Y-%m-%d-%H-%M-%S)T'
  for file; do
    read sha _ < <(printf %s "$file" | sha1sum)
    cp -- "$file" "/backup/$date-$sha-${file##*/}"
  done
}


# returns 0 if empty and 1 if not
# if no parameter is specified, uses PWD

isempty () {
  local ret=0 files=() argnum=$# ng dg
  builtin shopt -q nullglob && ng=true || ng=false
  builtin shopt -q dotglob && dg=true || dg=false
  builtin shopt -s nullglob dotglob
  set -- "${@-$PWD}"
  while (($#)); do
    if [[ ! -d $1 ]]; then
      printf '%s is not a directory\n' "$1"
      shift
      continue
    fi
    files=("$1/"*)
    if (( ${#files[@]} > 0 )); then
      ret=1
      # suppress printing if no arg
      ((argnum)) && printf '%s is not empty\n' "$1"
    fi
    shift
  done
  "$ng" || builtin shopt -u nullglob
  "$dg" || builtin shopt -u dotglob
  return "$ret"
}


# usage: haschanged [-p] file [file...]
# -p option is for a parsable output

haschanged () {
  local parsable=false
  if [[ $1 = -p ]] ; then
    parsable=true
    shift
  fi
  [[ $1 = -- ]] && shift
  if ((!$#)) ; then
    "$parsable" && echo 4 || echo "No file selected"
    return 4
  fi
  local filename
  local content
  while (($#)) ; do
    if [[ -f $1 ]]; then
      filename=$(realpath "$1" | base64 | tr / _)
      read hash _ <<< "$(sha1sum "$1")"
      if [[ -f "/tmp/libash/$filename" ]] ; then
        content=$(< "/tmp/libash/$filename")
        if [[ $content = "$hash" ]] ; then
          "$parsable" && echo 0 || echo "Not changed: $1"
        else
          "$parsable" && echo 1 || echo "File changed: $1"
          echo "$hash" > "/tmp/libash/$filename"
        fi
      else
        "$parsable" && echo 2 || echo "New file: $1"
        echo "$hash" > "/tmp/libash/$filename"
      fi
    else
      "$parsable" && echo 3 || echo "Not found: $1"
    fi
    shift
  done
}


# usage: abspath PATH..
# (eg: abspath ..//./path/./to/..//from/../to/./file )
# prints /absolute/path/to/file
# follows symlinks if possible
# returns 0 if the last path of the list is an existing file or directory

abspath () {
  local path
  while (($#)) ; do
    path=$1
    [[ $path = /* ]] || path=$PWD/$path
    # part of this is from lhunath

    # test if the directory exist
    if [[ -d $path ]] && path=$(cd -P -- "$path" && printf %sx "$PWD"); then path=${path%x}
    # or if it's a file in an existing directory
    elif [[ -d ${path%/*} ]] && path=$(cd -P -- "${path%/*}" && printf %sx "$PWD/${path##*/}")
    # need to check if we can cd in it ^
      then path=${path%x}

    # if we have readlink, use that
    elif type readlink &>/dev/null; then path=$(readlink -m "$path"; echo x) path=${path%$'\nx'}

    # or realpath... hoping it's gnu realpath
    elif type realpath &>/dev/null; then path=$(realpath -m "$path"; echo x) path=${path%$'\nx'}

    else
      # add an extra / to be removed later on, to help with paths like /path/to/file/..
      path=$1/
      path=${path//\/.\///}                # /foo/./bar/      -> /foo/bar/
      path=${path//\/\///}                 # /foo//bar/       -> /foo/bar/
      while [[ $path = */@(|.|..)/* ]] ; do
        path=${path/#\/..\///}             # /../foo/         -> /foo/
        path=${path/\/+([!\/])\/..\///}    # /foo/bar/../baz/ -> /foo/baz/
      done
      [[ $path = / ]] || path=${path%/}
    fi
    printf "%s\n" "$path"
    shift
  done
  [[ -e $path ]]
}


# usage: alarm [HH:MM [message [command args...]]]

alarm () {

  # alarm function without forks \o/
  # unless you want to run a command. in that case it forks \o/

  local alarm=${1:-"$ALARMTIME"}
  [[ $alarm = ??:?? ]] || {
    echo "Usage: $0 [HH:MM [message [command args...]]]" >&2
    return 1
  }

  # empty msg if $2 is ''
  local msg=${2-"${ALARMMSG-"It's ${alarm}, time to wake up"}"}
  local time

  until 
    printf -v time '%(%T)T'
    printf '\r%s' "$time"
    [[ $time = "$alarm":* ]]
  do
    # when running interactively, bash will use everything that's left
    # in read's buffer after the timeout as part of the next command
    # using -d '' to disable this
    read -t 1 -s -d ''
  done

  printf '\r        \r'
  [[ $msg ]] && printf '%s\n' "$msg"
  if (( $# > 2 )); then 
    shift 2
    "$@"
  fi
}


# usage: searchman page [thing-to-search]
# only works with one page at a time

searchman () {
  MANPAGER="${MANPAGER:-less -sI} ${2++/\"$2\"}" man "${1?Which manual page do you want?}"
}


# stfu

silent () { "$@" > /dev/null 2>&1; }
silout () { "$@" > /dev/null; }
silerr () { "$@" 2> /dev/null; }


# multiecho, no options
# mecho 2 hello world
mecho () {
  local num=$1
  shift
  for ((i = 0; i < num - 1; i++))
    { printf %s "$* "; }
  printf %s\\n "$*"
}


# usage: isup [host...]
# if no host, tries to connect to google

isup () {
  local ret
  if (($#)); then
    for i do
      curl --fail --silent --request POST --data "url=$i" --location http://arin.ga/isup.php
      (( ret |= $? ))
    done
    return "$ret"
  else
    ping -c 1 www.google.com > /dev/null 2>&1
  fi
}

myip () { curl icanhazip.com; }

# create a clean temp dir
#tempdir () { cd -- "$(mktemp -d ${1+-p "$1"})"; }
# stupid osx doesn't have mktemp -p
# portable version thanks to geirha
tempdir () { cd -- "$(mktemp -d "${1:-${TMPDIR:-/tmp}}/tmp.XXXXXX")"; }


# repeat a command
# usage: loop NUM command [args]
# repeat forever with a negative NUM
loop () {
  [[ $2 ]] || return 1
  local i
  for ((i = 0; i < $1 || $1 < 0; i++)); do
    "${@:2}"
  done
}


# make shift work with arrays
# usage: arrshift array [n]
arrshift () {
  # if the first argument is a valid array name, remove the first n elements and shift the rest
  if [[ $1 = [[:alpha:]_]*([[:alnum:]_]) && ${2-1} = +([[:digit:]]) && $# -le 2 ]]; then
    if eval [[ "\${#$1[@]}" -ge "${2-1}" ]]; then
      eval "$1=(\"\${$1[@]:${2-1}}\")"
    else
      # if you try to shift too many elements,
      # bash doesn't print error messages and just returns 1
      return 1
    fi
  else
    if [[ $1 != [[:alpha:]_]*([[:alnum:]_]) ]]; then
      printf "arrshift: invalid array name\n" >&2
    elif [[ ${2-1} = *[![:digit:]] ]]; then
      printf "arrshift: non numeric argument\n" >&2
    fi
    printf "usage: arrshift array [n]\n" >&2
    return 1
  fi
}

# use it to cleanup a dir
# usage: dircleanup [dir [glob]]
dircleanup () {
  local file opt IFS= quote="'\''"
  for file in "${1-.}"/${2-*}; do
    [[ -e $file ]] || return 1
    file -- "$file"
    select opt in head less "${EDITOR-vi}" rm skip custom; do
      case $opt in
        head|less|"${EDITOR-vi}"|rm) "$opt" -- "$file" ;;&
        # todo: find a good way to print files with quotes and consider using read without -r
        custom) read -rep 'Type your command: ' -i "rm -- '${file//\'/$quote}'" && eval "$REPLY" ;;&
        *) break
      esac
    done
  done
}

# minimal zsh-like vared
vared () {
  read -rei "${!1}" "$1"
}

# returns 1 if $1 and $2 are anagrams
anagram () {
  local i len1=${#1} len2=${#2}
  (( len1 == len2 )) || return 1
  local -A letters
  for (( i = 0; i < len1; i++ )) do
    (( letters['${1:i:1}'] += 1 ))
  done
  for (( i = 0; i < len2; i++ )) do
    (( ( letters['${2:i:1}'] -= 1 ) >= 0 )) || return 1
  done
  for i in "${letters[@]}"; do
    (( ! i )) || return 1
  done
}

# usage:  numglob [-s] start end [increment]
numglob () {
  # stupidly produces an extglob that matches all the numbers in a range
  # ranges can be zero padded
  # returns it in REPLY
  # if you don't use numglob -s, the result is also printed

  # example:
  # grep 'Access Denied' log-2015-04-$(numglob 07 23).log

  # the output is rather long but there's no real reason to work harder
  # to produce a shorter glob

  local IFS='|' array silent=0

  [[ $1 = -s ]] && shift && silent=1

  case $# in
    0|1) return 1 ;;
    2) [[ $1 = ?(-)+([[:digit:]]) &&
          $2 = ?(-)+([[:digit:]]) ]] || return
       eval "array=({$1..$2})" ;;
    *) [[ $1 = ?(-)+([[:digit:]]) &&
          $2 = ?(-)+([[:digit:]]) &&
          $3 = ?(-)+([[:digit:]]) ]] || return
       eval "array=({$1..$2..$3})" ;;
   esac
  REPLY="@(${array[*]})"
  if (( ! silent )); then echo "$REPLY"; fi
}

# true if it read at least one byte to read
# useful for programs like find that use a stupid exit code
output? () (
  local REPLY
  [[ -t 0 ]] && exec < <(cat)
  LC_ALL=C read -rn1 -d '' &&
    printf %b "${REPLY:-\0}" &&
    cat
)

# find swap files for vim
vimfind() { command find "${1-$HOME}" -type f -name "*${2-*}*.sw?" 2>/dev/null | "output?"; }
# vim can create files that don't start with . if directory is set


# quick way to make programs believe that they're reading/writing from/to a terminal
# from a stackoverflow answer
faketty () { script -eqfc "$(printf "%q " "$@")" /dev/null; }

# check if a file matches a glob
# if exists /foo/bar*; then ...
exists () [[ -e $1 ]]

# stupid hack to simulate =( ) in zsh
# cmd1 =(cmd2)   ->   cmd1 $(= cmd2)
=() { local file=$(mktemp /tmp/removemeXXXXXX); "$@" > "$file"; echo "$file"; }

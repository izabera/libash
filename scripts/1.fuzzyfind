#!/bin/bash

explodeglob () {
  # a support function that splits a strings in the 'exploded' array in the caller scope
  exploded=()
  local current i inglob
  for (( i = 0; i < ${#1}; i++ )); do  # glob here
    case ${1:i:1} in
       \\) if (( escaped )); then
             current+='\\'  # how to handle two backslashes here?
             escaped=0
           else
             escaped=1
             continue
           fi ;;

        [) if (( inglob )); then
             current+='['
           elif (( escaped )); then
             current+='\['
           else
             current+='[' inglob=1
           fi
           escaped=0 ;;

        ]) if (( escaped )); then
             current+='\]'
           elif (( inglob )); then
             current+=']' inglob=0
           else
             current+=']'
           fi
           escaped=0 ;;

    \*|\?) if (( escaped )); then
             current+=\\${1:i:1}
           else
             current+=${1:i:1}
           fi
           escaped=0 ;;

        *) escaped=0 current+=${1:i:1}
    esac

    if (( ! inglob )); then
      exploded+=("$current") current=
    fi

  done
}

find () {
  local fuzzy newargs option=0 opt exec_arg exploded
  # number of options for the arguments
  # add moar if needed

  # these are from gnu find 4.4.2

  declare -A args=(
        [d]=0         [daystart]=0   [depth]=0                  [follow]=0
        [help]=0      [-help]=0      [ignore_readdir_race]=0    [maxdepth]=1
        [mindepth]=1  [mount]=0      [no_ignore_readdir_race]=0 [noleaf]=0
        [regextype]=1 [version]=0    [-version]=0               [warn]=0
        [nowarn]=0    [xdev]=0       [amin]=1                   [anewer]=1
        [atime]=1     [cmin]=1       [cnewer]=1                 [ctime]=1    
        [empty]=0     [executable]=0 [false]=0                  [fstype]=1
        [gid]=1       [group]=1      [ilname]=1                 [iname]=1
        [inum]=1      [ipath]=1      [iregex]=1                 [iwholename]=1
        [links]=1     [lname]=1      [mmin]=1                   [mtime]=1
        [name]=1      [newer]=1      [newerXY]=1                [nogroup]=0
        [nouser]=0    [path]=1       [perm]=1                   [readable]=0
        [regex]=1     [samefile]=1   [size]=1                   [true]=0
        [uid]=1       [used]=1       [user]=1                   [wholename]=1
        [writable]=0  [xtype]=1      [delete]=0                 [exec]=2
        [execdir]=2   [fls]=1        [fprint]=1                 [fprint0]=1
        [fprintf]=1   [ls]=0         [ok]=2                     [okdir]=2
        [print]=0     [print0]=0     [printf]=1                 [prune]=0
        [quit]=0      ["("]=0        [")"]=0                    [!]=0
        [not]=0       [a]=0          [and]=0                    [o]=0
        [or]=0        [,]=0          [H]=0                      [L]=0
        [P]=0         [amin]=1       [anewer]=1                 [atime]=1
        [amin]=1      [anewer]=1     [atime]=1    
        )

  while (($#)); do
    # if option is 0, we're not in the options of an argument
    # if it's 1, we're in regular options
    # if it's 2, we're in -exec or -execdir
    if [[ $option = 0 ]]; then
      if [[ $1 = -* ]]; then

        if [[ $1 = -?(i)fuzzy ]]; then
          if (( $# > 1 )); then
            explodeglob "$2"
            IFS=* eval 'fuzzy="${exploded[*]}"'
            newargs+=("${1%fuzzy}name" "*$fuzzy*")
            shift
          else
            echo "find: missing argument to \`$1'"
            return 1
          fi

        elif [[ $1 = -exec@(|dir) ]]; then
          newargs+=("$1")
          option=2

        elif [[ -v args['${1#-}'] ]]; then
          newargs+=("$1")
          option=${args[${1#-}]}
          [[ $option = 2 ]] && opt=$1

        else # just add any unknown option
          newargs+=("$1")
        fi

      else # not an option? just add it
        newargs+=("$1")
      fi # $1 = -*

    elif [[ $option = 1 ]]; then
      newargs+=("$1")
      option=0

    else # args for exec and ok

      if [[ $1 = ';' ]]; then
        option=0
      elif [[ $1 = {} ]]; then
        exec_arg=1
      elif [[ $1 = + && $opt = exec* && $exec_arg = 1 ]]; then
        option=0
      else
        exec_arg=0
      fi
      newargs+=("$1")
    fi

    shift
  done
  command find "${newargs[@]}"
}

#!/bin/bash



# partial rewrite of compgen
# mainly to add a separator option
libash_compgen () {
  OPTIND=1
  local opt d=: f=: S='\n' completions comp case
  while getopts dfzS: opt; do
    case $opt in
      d) d=;;        # dirnames
      f) f=;;        # filenames
      z) S='\0';;    # NUL delimited
      S) S=$OPTARG;; # OPTARG delimited
    esac
  done
  shift $((OPTIND-1))
  [[ -d $1 && $1 != */ ]] && set -- "$1"/
  if builtin shopt -q nocaseglob; then case=no; fi
  if [[ $LIBASH_CASE = no || $(bind -v) = *"completion-ignore-case on"* ]]; then
    builtin shopt -s nocaseglob
  fi
  completions=("$1"*)
  if [[ $case = no ]]; then builtin shopt -u nocaseglob; fi
  for comp in "${completions[@]}"; do
    if [[ -f $comp ]]; then
      $f printf "%s$S" "$comp"
    elif [[ -d $comp ]]; then
      $d printf "%s$S" "$comp"
    fi
  done
}

# avoid opening binary files / pictures with vim
_vim () {
  local type path tilde="~" ng REPLY IFS=$' \t\n'

  # ctags
  if [[ $3 = -t ]]; then
    local pwd=$PWD
    # find it upwards
    while [[ $pwd ]]; do
      if [[ -r $pwd/tags ]]; then
        mapfile -t COMPREPLY < <(awk -F'\t' -v pat="^$2" '$1 ~ pat && $1 !~ /^!/ { print $1 }' "$pwd"/tags)
        return
      fi
      pwd=${pwd%/*}
    done
    # not found? ok maybe generate it?
    if type -P ctags &> /dev/null; then
      ctags -R . &&
        mapfile -t COMPREPLY < <(awk -F'\t' -v pat="^$2" '$1 ~ pat && $1 !~ /^!/ { print $1 }' tags)
    fi
    return
  fi

  case $2 in
    -*)
      COMPREPLY=(--nofork --cmd --echo-wid --help --literal --noplugin --remote
      --remote-expr --remote-send --remote-silent --remote-wait --remote-wait-silent
      --serverlist --servername --socketid --version)
      for type in "${!COMPREPLY[@]}"; do
        [[ ${COMPREPLY[type]} = "$2"* ]] || unset "COMPREPLY[type]"
      done
      return ;;
    '~') path=$HOME/
      set "$1" "~/" "$3" ;;
    '~/'*) read -N0 path < <(printf %s "${2/$tilde/$HOME}");;
    *) read -N0 path < <(printf %s "$2");;
  esac
  compopt -o plusdirs -o filenames
  # read filename
  while read -r -d ''; do
    # mime type (remove : and leading whitespace)
    read -r _ type;
    if [[ $type = @(text*|message*|inode/x-empty|application/@(pgp-signature|postscript)) ]]; then
      [[ $REPLY = "$HOME"/* && $2 = '~/'* ]] && REPLY=${REPLY/"$HOME"/$tilde}
      COMPREPLY+=("$REPLY")
    fi
  done < <(
            if [[ $LIBASH_CASE = no || $(bind -v) = *"completion-ignore-case on"* ]]; then
              builtin shopt -s nocaseglob
            fi
            builtin shopt -s nullglob
            # don't check these, add them by default
            whitelist=${vim_completion_whitelist+$vim_completion_whitelist|}
            whitelist+='@(c|h)?(pp)|txt|md|tex|py|pl|sh|sig|js|tcl'
            # don't check these either
            blacklist=${vim_completion_blacklist+$vim_completion_blacklist|}
            blacklist+='png|jp?(e)g|gif|mp[34]|ogg|tar|gz|xz|bz2|lzma|pdf|a|o|so|wav|flac|mov|flv|avi'

            # just assume that log files are ok to open
            # even if they end in something like .weechatlog
            # and contain control characters (irc colors)
            local arr=( "$path"*.@($whitelist) "$path"*log )
            (( ${#arr[@]} )) && printf '%s\0: text\n' "${arr[@]}"

            # try to find scripts
            arr=("$path"!(*.@($whitelist|$blacklist)|*log))
            LANG=C
            for file in "${!arr[@]}"; do
              [[ -f ${arr[file]} ]] || continue
              IFS= read -rn2 -d '' < "${arr[file]}"
              if [[ $REPLY = "#!" ]]; then
                printf '%s\0: text\n' "${arr[file]}"
                unset "arr[file]"
              fi
            done 2>/dev/null

            # then use file --mime-type on what's left
            file --mime-type -0 -L -r -- /dev/null "${arr[@]}" 2>/dev/null
            # and then >>>let's<<< add this random line with a single quote because of a bug in procsub fixed in 4.3
            )

  # FIXME
  # when you're trying to complete ~ without / it doesn't show the directories

  # workaround, not perfect
  if [[ $2 = '~/' ]]; then
    builtin shopt -q nullglob; ng=$?; builtin shopt -s nullglob
    local dirs=(~/*/)
    (( ng )) && builtin shopt -u nullglob
    dirs=("${dirs[@]%/}") dirs=("${dirs[@]/#"$HOME"/$tilde}")
    COMPREPLY+=("${dirs[@]}")
  fi
}

complete -o bashdefault -F _vim vim

# use this in case file fails detect a file as text
# or in huge directories with thousands of files
alias __vim=vim
# probably never needed, it's quite fast now


_ag () {
  # there is this:
  # https://github.com/ggreer/the_silver_searcher/blob/master/ag.bashcomp.sh
  # but i don't really like it so yeah
  local longopts=(--ackmate --ackmate-dir-filter --affinity --after --all-text --all-types
  --before --break --case-sensitive --color --color-line-number --color-match --color-path
  --color-win-ansi --column --context --count --debug --depth --file-search-regex --filename
  --files-with-matches --files-without-matches --fixed-strings --follow --group --heading
  --help --hidden --ignore --ignore-case --ignore-dir --invert-match --line-numbers
  --list-file-types --literal --match --max-count --no-numbers --no-recurse --noaffinity
  --nobreak --nocolor --nofilename --nofollow --nogroup --noheading --nonumbers --nopager
  --norecurse --null --numbers --one-device --only-matching --pager --parallel --passthrough
  --passthru --path-to-agignore --print-long-lines --print0 --recurse --search-binary
  --search-files --search-zip --silent --skip-vcs-ignores --smart-case --stats --unrestricted
  --version --vimgrep --word-regexp --workers)
  local shtopt=(-a -A -B -C -D -f -F -g -G -h -i -l -L -m -n -p -Q -r -R -s -S -t -u -U -v -V -w -z)
  local i

  if [[ $2 = -* ]]; then
    for i in "${longopts[@]}" "${shtopts[@]}"; do
      [[ $i = "$2"* ]] && COMPREPLY+=("$i")
    done
    return
  fi

  case $3 in
    --pager) mapfile -t COMPREPLY < <( compgen -c -- "$2") ; return ;;
    --ignore@(|-dir)) compopt -o plusdirs; return ;;
  esac

  # if there's a tags file, use it
  local pwd=$PWD
  while [[ $pwd ]]; do
    if [[ -r $pwd/tags ]]; then
      mapfile -t COMPREPLY < <(awk -F'\t' -v pat="^$2" '$1 ~ pat && $1 !~ /^!/ { print $1 }' "$pwd"/tags)
      return
    fi
    pwd=${pwd%/*}
  done

  if type -P ctags &> /dev/null; then
    ctags -R . &&
      mapfile -t COMPREPLY < <(awk -F'\t' -v pat="^$2" '$1 ~ pat && $1 !~ /^!/ { print $1 }' tags)
  fi
}

complete -o bashdefault -F _ag ag


# only complete shell scripts and options
_shellcheck () {
  local type path tilde="~" REPLY ng whitelist blacklist file IFS=$' \t\n'
  case $2 in
    '~') path=$HOME;;
    '~/'*) read -N0 path < <(printf %s "${2/$tilde/$HOME}");;
    *) read -N0 path < <(printf %s "$2");;
  esac

  # parse options
  local inopt=false i end=false
  # stop one word before
  for (( i = 1; i < COMP_CWORD; i++ )); do
    # check if we need an option or a filename
    case ${COMP_WORDS[i]} in
      # only check the options that need extra args
      # ignore options like -eSCxxxx,SCyyyy
      -@(e|f|s)|--@(exclude|format|shell)) inopt=true ;;
      --) end=true; break ;;
      [!-]*) if ! "$inopt"; then
               end=true
               break
             else
               inopt=false
             fi
    esac
  done
  if "$inopt"; then # we're processing an argument to an option
    # we're after an option, completing an empty word
    case $3 in # previous
      # --exclude is not completed
      -f|--format) COMPREPLY=(checkstyle gcc json tty) ;;
      -s|--shell) COMPREPLY=(bash sh ksh)
    esac
    return
  elif ! "$end" && [[ $2 = -* ]]; then # we're processing a new option
    for i in -e -f -s -V --version --exclude= --format= --shell=; do
      [[ $i = "$2"* ]] && COMPREPLY+=("$i") && compopt -o nospace
    done
    return
  fi # end of option parsing

  compopt -o plusdirs -o filenames
  [[ -d $path && $path != @(.|..) ]] && path=${path%/}/
  local blacklist='@(c|h)?(pp)|tex|pl|md|py|png|jp?(e)g|gif|mp[34]|ogg|tar|gz|xz|bz2|lzma|pdf|a|o|so|wav|flac|mov|flv|avi'
  local whitelist='?(?(b|d)a|?(m)k|z)sh?(rc)'

  builtin shopt -q nullglob; ng=$?; builtin shopt -s nullglob
  COMPREPLY=("$path"*.@($whitelist))

  for file in "$path"!(*.@($whitelist|$blacklist)); do
    [[ -f $file ]] || continue

    # check the shebang line
    read -rn 64 < "$file"
    [[ $REPLY = "#!"*([[:blank:]])@(*/bin/|/usr/bin/env+([[:blank:]]))?(?(b|d)a|?(m)k|z)sh* ]] &&
      COMPREPLY+=("${file/"$HOME"/$tilde}")
  done

  if [[ $2 = '~' ]]; then
    local dirs=(~/*/)
    dirs=("${dirs[@]%/}") dirs=("${dirs[@]/#"$HOME"/$tilde}")
    COMPREPLY+=("${dirs[@]}")
  fi
  (( ng )) && builtin shopt -u nullglob
}

complete -o bashdefault -F _shellcheck shellcheck


_busybox () {
  type -P busybox > /dev/null || return
  [[ -f /tmp/libash/busybox ]] || busybox --list > /tmp/libash/busybox
  if (( ${#COMP_WORDS[@]} < 3 )); then
    while read -r; do
      [[ $REPLY = "$2"* ]] && COMPREPLY+=("$REPLY")
    done < /tmp/libash/busybox
  else
    compopt -o default
    compopt -o filenames
  fi
}
complete -o bashdefault -F _busybox busybox

_toybox () {
  type -P toybox > /dev/null || return
  [[ -f /tmp/libash/toybox ]] || toybox | tr -s ' ' '\n' > /tmp/libash/toybox
  if (( ${#COMP_WORDS[@]} < 3 )); then
    while read -r; do
      [[ $REPLY = "$2"* ]] && COMPREPLY+=("$REPLY")
    done < /tmp/libash/toybox
  else
    compopt -o default
    compopt -o filenames
  fi
}
complete -o bashdefault -F _toybox toybox


# enhanced shopt to accept shell options
complete -o bashdefault -A shopt -A setopt shopt setopt unsetopt


_asciinema () {
  local i ng
  builtin shopt -q nullglob; ng=$?; builtin shopt -s nullglob
  if (( COMP_CWORD == 1 )); then
    for i in rec play upload auth --help --version; do
      [[ $i = "$2"* ]] && COMPREPLY+=("$i")
    done
  else
    case ${COMP_WORDS[1]} in
      rec) if [[ $2 = -* ]]; then
             for i in --command --title --max-wait --yes; do
               [[ $i = "$2"* ]] && COMPREPLY+=("$i")
             done
           fi
           if (( ! ${#COMPREPLY[@]} )); then
             case $3 in
               -c|--command) mapfile -t COMPREPLY < <(compgen -c -- "$2") ;;
               -*) ;;
               *) COMPREPLY=("$2"*) ;;
             esac
           fi ;;
      upload|play) COMPREPLY=("$2"*) ;;
    esac
  fi
  (( ng )) && builtin shopt -u nullglob
}
complete -o bashdefault -o filenames -F _asciinema asciinema

_imgurbash () {
  mapfile -t COMPREPLY < <( compgen -G "$2*.@(png|jp?(e)g|gif)" )
}
complete -o bashdefault -o filenames -F _imgurbash imgurbash

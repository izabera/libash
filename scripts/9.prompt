#!/usr/bin/env bash

# saving colors to avoid having to use tput again
# use different files for different terminals
# (some terminals (e.g. linux console) don't support bright colors)
if [[ -r $HOME/.config/libash/colors-${TERM:=dumb} ]]; then
  . "$HOME/.config/libash/colors-$TERM"
else
  _black=$(tput setaf 0)    _bright_black=$(tput setaf 8)
  _red=$(tput setaf 1)      _bright_red=$(tput setaf 9)
  _green=$(tput setaf 2)    _bright_green=$(tput setaf 10)
  _yellow=$(tput setaf 3)   _bright_yellow=$(tput setaf 11)
  _blue=$(tput setaf 4)     _bright_blue=$(tput setaf 12)
  _magenta=$(tput setaf 5)  _bright_magenta=$(tput setaf 13)
  _cyan=$(tput setaf 6)     _bright_cyan=$(tput setaf 14)
  _white=$(tput setaf 7)    _bright_white=$(tput setaf 15)
  _no_color=$(tput sgr 0)   _bold=$(tput bold)
  _colors=("$_black"        "$_red"            "$_green"        "$_yellow"
           "$_blue"         "$_magenta"        "$_cyan"         "$_white"
           "$_bright_black" "$_bright_red"     "$_bright_green" "$_bright_yellow"
           "$_bright_blue"  "$_bright_magenta" "$_bright_cyan"  "$_bright_white"
           "$_no_color"     "$_bold")
  {
    printf "%s=%q\n" _black           "$_black"           \
                     _red             "$_red"             \
                     _green           "$_green"           \
                     _yellow          "$_yellow"          \
                     _blue            "$_blue"            \
                     _magenta         "$_magenta"         \
                     _cyan            "$_cyan"            \
                     _white           "$_white"           \
                     _bright_black    "$_bright_black"    \
                     _bright_red      "$_bright_red"      \
                     _bright_green    "$_bright_green"    \
                     _bright_yellow   "$_bright_yellow"   \
                     _bright_blue     "$_bright_blue"     \
                     _bright_magenta  "$_bright_magenta"  \
                     _bright_cyan     "$_bright_cyan"     \
                     _bright_white    "$_bright_white"    \
                     _no_color        "$_no_color"        \
                     _bold            "$_bold"
    for i in "${!_colors[@]}"; do
      printf "_colors[%s]=%q\n" "$i" "${_colors[i]}"
    done
    printf "_hostcolor=%s\n" "$(( _hostcolor = (64#${HOSTNAME//[!a-zA-Z_@]} & (~0^(1<<63))) % 6 + 1 ))"
  } > "$HOME/.config/libash/colors-$TERM"
fi

# /path/to/dir  ->  /p/t/dir
# handles collisions correctly!
collapsed_wd () {
  if [[ $previous_cmd_pwd = "$PWD" ]]; then return; else previous_cmd_pwd=$PWD; fi
  local cwd tilde i j pathsofar ambiguous ng dg
  builtin shopt -q nullglob; ng=$?; builtin shopt -s nullglob
  builtin shopt -q dotglob; dg=$?; builtin shopt -s dotglob
  cwd=$PWD/ tilde="~" # bash didn't perform quote removal in the replacement until 4.3
  if [[ $HOME ]]; then
    IFS=/ read -ra cwd <<< "${cwd/#"$HOME"\//$tilde/}"
  else
    IFS=/ read -ra cwd <<< "$cwd"
  fi
  if [[ $cwd ]]; then
    shortcwd="~" pathsofar=$HOME
  else
    shortcwd= # if it was empty, the path starts with /
  fi
  for (( i = 1; i < ${#cwd[@]}; i ++ )); do
    pathsofar+=/
    for (( j = 0; j < ${#cwd[i]}; j ++ )); do
      pathsofar+=${cwd[i]:j:1}
      ambiguous=("$pathsofar"*/)  # this is wrong if $PWD is not an existing path BUT THAT'S YOUR FAULT
      (( ${#ambiguous[@]} == 1 )) && break
    done
    shortcwd+=/${pathsofar##*/}
    pathsofar=${pathsofar%/*}/${cwd[i]}
  done
  [[ $shortcwd = */?* ]] && shortcwd=${shortcwd%/*}/${cwd[@]: -1}

  (( ng )) && builtin shopt -u nullglob
  (( dg )) && builtin shopt -u dotglob

  # now shorten it further with PROMPT_DIRTRIM
  IFS=/ read -ra cwd <<< "$shortcwd"
  pathsofar=${cwd[${#cwd[@]}-1]}
  unset "cwd[${#cwd[@]}-1]"
  if [[ $PROMPT_DIRTRIM = +([[:digit:]]) && 10#$PROMPT_DIRTRIM -gt 0 ]]; then
    if [[ $shortcwd = "~" || $shortcwd = / ]]; then
      return
    elif [[ $shortcwd = "~"/* ]]; then
      for (( i = 1; i < 10#$PROMPT_DIRTRIM && ${#cwd[@]} > 1; i++ )); do
        pathsofar=${cwd[${#cwd[@]}-1]}/$pathsofar
        unset "cwd[${#cwd[@]}-1]"
      done
      [[ "~/$pathsofar" != "$shortcwd" ]] && shortcwd="~/.../$pathsofar"
    else
      [[ -z $cwd && ${#cwd[@]} -le PROMPT_DIRTRIM ]] && return
      for (( i = 1; i < 10#$PROMPT_DIRTRIM && ${#cwd[@]} > 1; i++ )); do
        pathsofar=${cwd[${#cwd[@]}-1]}/$pathsofar
        unset "cwd[${#cwd[@]}-1]"
      done
      [[ "$pathsofar" != "$shortcwd" ]] && shortcwd="/.../$pathsofar"
    fi
  fi
}

# if simpleprompt is a function it can't reset the DEBUG trap in the caller
alias simpleprompt="trap - DEBUG; PROMPT_COMMAND= PS1='\u@\h \w \$ '; tput sgr0"

# got the array idea from greycat
PS1='\[${_colors[1+(EUID != 0)]}\]\u\[$_no_color\]@'
PS1+='\[${_colors[_hostcolor]}\]\h\[$_no_color\] '
PS1+='\[$_red\]${shortcwd//\//\[$_bright_red\]/\[$_red\]}\[$_no_color\] '
PS1+='\[${_colors[$? ? 1 : 2]}\]\$\[$_no_color\] '

if (( time_in_prompt )); then
  PS1+='$execution_time'
fi

# use a function to avoid calling the DEBUG trap more than once
PROMPT_COMMAND=prompt_command
prompt_command () {
  [[ $TERM = sun-color ]] && return
  # yay patchwork coding
  local old=$(stty -g)                                              # from lhunath
  stty raw                                                          # from lhunath

  # ask the tty the cursor position, if possible (i.e. the user didn't type anything)
  if ! read -t 0 < /dev/tty; then                                   # from lhunath
    local row col
    stty -echo                                                      # from koala_man
    printf '\e[6n' > /dev/tty                                       # from lhunath
    IFS='[;' read -dR _ row col < /dev/tty                          # from lhunath
    stty echo                                                       # from koala_man
    (( col != 1 )) && printf "%s$%s\r\n" "$_blue" "$_no_color"
  else
    printf "%s$%s%*s\r" "$_red" "$_no_color" "$((COLUMNS-1))"       # from kurahaupo
  fi
  stty "$old"                                                       # from lhunath

  collapsed_wd
  if (( time_in_prompt )); then
    execution_time= debug_trap=0
    local pattern cmd time=1
    if (( ${#do_not_time[@]} )); then
      cmd=$(history 1) cmd=${cmd#???????}

      # HISTCONTROL kinda messes this up
      for pattern in "${do_not_time[@]}"; do
        if [[ $cmd = $pattern ]]; then
          time=0
          break
        fi
      done
    fi

    if (( time )); then
      if (( SECONDS > time_in_prompt_min )); then
        if (( SECONDS > 3600 )); then
          execution_time+=$((SECONDS / 3600))h
          (( SECONDS %= 3600 ))
        fi
        if (( SECONDS > 60 )); then
          execution_time+=$((SECONDS / 60))m
          (( SECONDS %= 60 ))
        fi
        if (( SECONDS > 0 )); then
          execution_time+=${SECONDS}s
        fi
        if [[ $execution_time ]]; then
          execution_time="[$execution_time] "
        fi
      fi
    fi
    SECONDS=0
  fi
  #libash_hook_handler
  #undefC-cC-z
}

trap '((time_in_prompt && !debug_trap++))&&SECONDS=0' debug

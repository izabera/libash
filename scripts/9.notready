# whoa this was way harder than you'd expect it to be
git_hook () {
  local extdebug debugtrap
  if builtin shopt -q extdebug; then extdebug=true
  else extdebug=false
  fi

  builtin shopt -s extdebug
  debugtrap=$(trap -p DEBUG)
  trap 'if [[ $BASH_COMMAND = git@* ]]; then git clone "$BASH_COMMAND"; ! :; fi' DEBUG

  # trap -p won't print anything if no trap is set
  # bash is so helpful -.-
  if [[ $debugtrap ]]; then eval "$debugtrap"; else trap - DEBUG; fi

  $extdebug || builtin shopt -s extdebug
}

return_value () {
  (( $? == 0 )) && printf %s%d%s "$_green" "$?" "$_no_color" || printf %s%d%s "$_red" "$?" "$_no_color"
}

return_status () {
  (( $? == 0 )) && printf %s "$_green" || printf %s "$_red"
}

# /path/to/dir  ->  /p/t/dir
simple_collapsed_wd () {
  local cwd i tilde
  cwd=$PWD/ tilde="~"
  IFS=/ read -ra cwd <<< "${cwd/#"$HOME"\//$tilde/}"
  if [[ $cwd ]]; then
    shortcwd="~"
  else
    shortcwd=
  fi
  for (( i = 1; i < ${#cwd[@]}; i ++ )); do
    shortcwd+=/${cwd[i]::1}
  done
  [[ $shortcwd = */?* ]] && shortcwd=${shortcwd%/*}/${cwd[@]: -1}
}

saved_stty=$(command stty -g)
stty () {
  local status
  command stty "$@"
  status=$?
  saved_stty=$(command stty -g)
  return "$status"
}

# use the prompt flag to avoid calling stty several times
# in the DEBUG trap with compound commands
undefC-cC-z () {
  (( ! prompt_flag )) && command stty intr undef susp undef < /dev/tty
  prompt_flag=1
}

resetC-cC-z () {
  (( prompt_flag )) && command stty "$saved_stty" < /dev/tty
  prompt_flag=0
}

bind '\C-z: "\C-cfg\C-m"' '\C-c: kill-whole-line'
bind -m vi-command '\C-z: "\C-cifg\C-m"'
bind -m vi-move '\C-z: "\C-cifg\C-m"'

# save the last arg in  __ then restore it
trap '__=$_; debug_trap "$BASH_COMMAND"; : "$__"' DEBUG

debug_trap () {
   cat files with < like in zsh
  [[ $1 = " <"* ]] && eval cat "$1"
  resetC-cC-z
}

cd () {
  previous_cmd_pwd=$PWD
  chpwd_hook
  builtin cd "$@"
}

awkcorrect () {
  # todo, should be faster
  awk -v cur="$1" '
    function prexit() { print; exit }
    { i = 1
      while (substr(cur,i,1) == substr($0,i,1)) i++
      cur = substr(cur,i);
      new = substr($0,i);
      if (substr(cur,1,1) == substr(new,2,1) &&
          substr(cur,2,1) == substr(new,1,1) &&
          substr(cur,2) == substr(new,2)) prexit()
      if (substr(cur,1) == substr(new,1)) prexit()
      if (substr(cur,2) == new) prexit()
      if (substr(new,2) == cur) prexit()
    }
  '
}

whatis () {
  {
    declare -p "$@" 2>/dev/null
    type -- "$@" 2>/dev/null
  } | awk 'END { exit ! x } { x = 1; print }'
}

# only match from 1 to n
numg () {
  local silent i j len prefix
  [[ $1 = -s ]] && shift && silent=1 || silent=0
  [[ $1 = [1-9]*([[:digit:]]) ]] || return

  if [[ $1 = [1-9] ]]; then
    [[ $1 = 1 ]] && REPLY=1 || REPLY=[1-$1]
  else
    len=${#1}

    REPLY="@("
    for (( i = 0; i < len - 1; i++ )); do
      REPLY+=[1-9]
      for (( j = 0; j < i; j++ )); do
        REPLY+=[0-9]
      done
      REPLY+="|"
    done

    if [[ $1 != 1* ]]; then
      [[ ${1:0:1} = 2 ]] && REPLY+=1 || REPLY+=[1-$((${1:0:1} - 1))]
      for (( j = 0; j < i; j++ )); do
        REPLY+=[0-9]
      done
      REPLY+="|"
    fi

    prefix=${1:1} prefix=${prefix%%[!0]*}

    for (( i = 1; i < len; i++ )); do
      REPLY+=${1:0:1}
      while [[ ${1} = ?0* ]] && (( i++ ))
      for (( j = 1; j < i; j++ )); do
        REPLY+=${1:j:1}
        [[ ${1:j+1:1} = 0 ]] && (( i++ ))
      done
      [[ ${1:j:1} = 0 ]] && REPLY+=0 || REPLY+=[0-${1:j:1}]
      for (( ; j < len - 1; j++ )); do
        REPLY+=[0-9]
      done
      REPLY+="|"
    done
    REPLY="${REPLY%|})"
  fi

  if (( ! silent )); then echo "$REPLY"; fi
}

return
cdpath-tilde-expansion() {
  local word pre prepre post postpost

  pre=${READLINE_LINE::READLINE_POINT}
  prepre=$pre
  pre=${pre##*[$' \t']}
  prepre=${prepre%"$pre"}

  post=${READLINE_LINE:READLINE_POINT}
  postpost=$post
  post=${pre%%[$' \t']*}
  postpost=${postpost##"$post"}

  word=$pre$post
  if [[ $word = "~"* ]]; then

  fi

  READLINE_LINE=$prepre$word$postpost
}

bind -x '"\M-~":cdpath-tilde-expansion' -m emacs
bind -x '"\M-&":cdpath-tilde-expansion' -m emacs
bind -x '"&":cdpath-tilde-expansion' -m vi-move

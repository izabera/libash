#!/bin/bash

# warning:
# the following are horrible hacks, not recommended for any use
# yadda yadda yadda

# they only work in interactive shells and most of them can and _will_
# break if you use a custom history format

# the basic idea behind these aliases is found at
# http://www.chiark.greenend.org.uk/~sgtatham/aliases.html

aringa-helper () {
  history 1 | {
    read -r _ _ command
    tilde="~"
    dir=${PWD/#"$HOME"/$tilde} dir=${dir/%\/}
    {
      printf '%s@%s %s $ %s\n' "$USER" "$HOSTNAME" "$dir" "$command"
      eval "$command"
      printf '\n------------ exit code %d ------------\n' $? 
    } |& tee >(curl -sF 'aringa=<-' arin.ga | xclip)
  }
}
alias caringa='aringa-helper #'


chronic-helper () {
  history 1 | {
    read -r _ _ command
    file=$(mktemp)
    eval "$command" &> "$file"
    var=$?
    if ((var)); then
      cat "$file"
    fi
    rm "$file"
    exit $var
  }
}
# this doesn't really work if your program writes to /dev/tty or similar
# but moreutils' chronic fails as well
alias chronic='chronic-helper #'

mispipe-helper () {
  history 1 | {
    read -r _ _ command
    num=0
    read -r num subcommand <<< "$command"
    if [[ $num != *[!0-9]* ]] ; then
      command=$subcommand
    else
      num=0
    fi
    # note to self on PIPESTATUS:
    # eval 'pipeline'  won't put the values in PIPESTATUS 
    # also, you can't retrieve the values one at a time

    # osse found a decent solution that doesn't involve temp files
    eval "$command; status=(\"\${PIPESTATUS[@]}\")"

    [[ ${status[num]} ]] && return ${status[num]} || return ${status[-1]}
  }
}
# doesn't work with heredocs
alias mispipe='mispipe-helper #'


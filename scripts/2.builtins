#!/bin/bash

shift () {
  # make shift work with arrays
  # if the first argument is a number, use the old shift
  # or, if it's a valid array name, remove the first n elements and shift the rest
  if [[ $# -eq 0 || $1 = +([[:digit:]]) ]]; then
    builtin shift "$@"
  elif [[ $1 = [[:alpha:]_]*([[:alnum:]_]) && ${2-1} = +([[:digit:]]) && $# -le 2 ]]; then
    if eval [[ "\${#$1[@]}" -ge "${2-1}" ]]; then
      eval "$1=(\"\${$1[@]:${2-1}}\")"
    else
      # if you try to shift too many elements,
      # bash doesn't print error messages and just returns 1
      return 1
    fi
  else
    if [[ $1 != [[:alpha:]_]*([[:alnum:]_]) ]]; then
      printf "%s: shift: invalid array name\n" "$0" >&2
    fi
    printf "%s: shift: usage: shift [array] [n]\n" "$0" >&2
    return 1
  fi
}

# this function is from bash_completion
# my shift breaks it
# "fixed" by using the builtin version
_upvars()
{
    if ! (( $# )); then
        echo "${FUNCNAME[0]}: usage: ${FUNCNAME[0]} [-v varname"\
            "value] | [-aN varname [value ...]] ..." 1>&2
        return 2
    fi
    while (( $# )); do
        case $1 in
            -a*)
                # Error checking
                [[ ${1#-a} ]] || { echo "bash: ${FUNCNAME[0]}: \`$1': missing"\
                    "number specifier" 1>&2; return 1; }
                printf %d "${1#-a}" &> /dev/null || { echo "bash:"\
                    "${FUNCNAME[0]}: \`$1': invalid number specifier" 1>&2
                    return 1; }
                # Assign array of -aN elements
                [[ "$2" ]] && unset -v "$2" && eval $2=\(\"\${@:3:${1#-a}}\"\) &&
                builtin shift $((${1#-a} + 2)) || { echo "bash: ${FUNCNAME[0]}:"\
                    "\`$1${2+ }$2': missing argument(s)" 1>&2; return 1; }
                ;;
            -v)
                # Assign single value
                [[ "$2" ]] && unset -v "$2" && eval $2=\"\$3\" &&
                builtin shift 3 || { echo "bash: ${FUNCNAME[0]}: $1: missing"\
                "argument(s)" 1>&2; return 1; }
                ;;
            *)
                echo "bash: ${FUNCNAME[0]}: $1: invalid option" 1>&2
                return 1 ;;
        esac
    done
}


pushd () {
  builtin pushd "${@-$HOME}"
}
